// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(WordContext))]
    partial class WordContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.EnglishSentence", b =>
                {
                    b.Property<int>("EnglishWordId")
                        .HasColumnType("int");

                    b.Property<int>("SentenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EnglishWordId", "SentenceId");

                    b.HasIndex("SentenceId");

                    b.ToTable("EnglishSentences");
                });

            modelBuilder.Entity("Model.Entities.Sentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sentences");
                });

            modelBuilder.Entity("Model.Entities.WordMeaning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnglisWordId")
                        .HasColumnType("int");

                    b.Property<int>("TurkishWordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnglisWordId");

                    b.HasIndex("TurkishWordId");

                    b.ToTable("WordMeanings");
                });

            modelBuilder.Entity("Model.Entity.EnglishWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InQuizShown")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimesShown")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WordType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnglishWords");
                });

            modelBuilder.Entity("Model.Entity.TurkıshWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WordMeaningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TurkıshWords");
                });

            modelBuilder.Entity("Model.Entities.EnglishSentence", b =>
                {
                    b.HasOne("Model.Entity.EnglishWord", "EnglishWord")
                        .WithMany("EnglishSentence")
                        .HasForeignKey("EnglishWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Sentence", "Sentence")
                        .WithMany("EnglishSentence")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnglishWord");

                    b.Navigation("Sentence");
                });

            modelBuilder.Entity("Model.Entities.WordMeaning", b =>
                {
                    b.HasOne("Model.Entity.EnglishWord", "EnglishWord")
                        .WithMany("WordMeaning")
                        .HasForeignKey("EnglisWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.TurkıshWord", "TurkıshWord")
                        .WithMany("WordMeaning")
                        .HasForeignKey("TurkishWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnglishWord");

                    b.Navigation("TurkıshWord");
                });

            modelBuilder.Entity("Model.Entities.Sentence", b =>
                {
                    b.Navigation("EnglishSentence");
                });

            modelBuilder.Entity("Model.Entity.EnglishWord", b =>
                {
                    b.Navigation("EnglishSentence");

                    b.Navigation("WordMeaning");
                });

            modelBuilder.Entity("Model.Entity.TurkıshWord", b =>
                {
                    b.Navigation("WordMeaning");
                });
#pragma warning restore 612, 618
        }
    }
}
